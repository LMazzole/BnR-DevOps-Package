def TEAMS_CHANNEL_URL = "PasteYourURLhere"
def CONFIG_NAME = "YourConfigNameHere"
def UNIT_TEST_CONFIG_NAME = "YourUnitTestConfigNameHere"
def REPO_NAME = "YourNameHere"
def REPO_ORGANIZATION = "YourOrganizationHere"
def EMAIL_LIST = "First1.Last1@br-automation.com;First2.Last2@br-automation.com;"

pipeline {
    agent { 
         node { 
             label 'AS_412'
         }
    } 
    environment {
    	PROJECT_DIR = "$WORKSPACE"
    	RELEASE_VERSION = ReleaseVersion(workspace:  "${WORKSPACE}");
    }
    options {
        office365ConnectorWebhooks([[
            name: 'Jenkins',
            startNotification: true,
            notifySuccess: true,
            notifyAborted: true,
            notifyFailure: true,
            notifyBackToNormal: true,
            url: "${TEAMS_CHANNEL_URL}"
        ]])
    }
    stages {
        stage('Update Tags') {
            steps {
                bat(script: 'git fetch --tags --force');
            }
        }
        stage('Build AS Project') {
			steps {
				BuildASProject(project: "${PROJECT_DIR}", configuration: "${CONFIG_NAME}", max_warnings: -1, buildpip: true);
                		powershell(returnStdout: true, script: "Move-Item -Path PIP.zip -Destination PIP-${RELEASE_VERSION}.zip -Force");
			}
        }
        stage('Unit Tests') {
            options {
                timeout(time: 15, unit: 'MINUTES') 
            } 
			steps {
				RunArUnitTests(project: "${PROJECT_DIR}", configuration: "${UNIT_TEST_CONFIG_NAME}");
			}
        }
        stage('Deploy') {
			parallel {
				stage('Deploy Release Candidate')
				{
					when
					{
						anyOf {
							branch 'release/*'
						}
					}
					steps {
						BuildARsimStructure(project: "${PROJECT_DIR}", configuration: "${CONFIG_NAME}");
						powershell(returnStdout: true, script: "Rename-Item -Path ArSim.zip -NewName ArSim-${RELEASE_VERSION}.zip");
					}
				}
				stage('Deploy Feature')
				{
					when
					{
						anyOf {
							branch 'feature/*'
							branch 'develop'
						}
					}
					steps {
						BuildARsimStructure(project: "${PROJECT_DIR}", configuration: "${CONFIG_NAME}");
						powershell(returnStdout: true, script: "Rename-Item -Path ArSim.zip -NewName ArSim-${RELEASE_VERSION}.zip");
					}
				}
			}
		}
    }
    post {
        always {
            script {
                ProcessArTestResults();
                archiveArtifacts(artifacts: "*.zip", followSymlinks: false)
                SendNotifications(recipients: "${EMAIL_LIST}", buildStatus: currentBuild.result);
            }
        }
        success {
            script {
                def fileNameArSim = powershell(returnStdout: true, script: "(Get-ChildItem -Path '${WORKSPACE}\\*' -Include ArSim*.zip | Sort-Object -Property LastWriteTime | select -Last 1).Name").trim();
				def fileNamePIP = powershell(returnStdout: true, script: "(Get-ChildItem -Path '${WORKSPACE}\\*' -Include PIP*.zip | Sort-Object -Property LastWriteTime | select -Last 1).Name").trim();
                def downloadArSim = ""
                def downloadPIP = ""
                
                downloadArSim = UploadToGitHub(version: "${RELEASE_VERSION}", organization: "${REPO_ORGANIZATION}", name: "${REPO_NAME}", file: "${WORKSPACE}\\${fileNameArSim}");
				downloadPIP = UploadToGitHub(version: "${RELEASE_VERSION}", organization: "${REPO_ORGANIZATION}", name: "${REPO_NAME}", file: "${WORKSPACE}\\${fileNamePIP}");
                                
                office365ConnectorSend(webhookUrl: "${TEAMS_CHANNEL_URL}",
                    color: "0099ff",
                    message:"## Build Success   \n[**Jenkins ARsim Structure Download Link**](${env.BUILD_URL}artifact/${fileNameArSim})   \n[**Jenkins PIP Download Link**](${env.BUILD_URL}artifact/${fileNamePIP})   \n[**Download Link ARsim**](${downloadArSim})   \n[**Download Link PIP**](${downloadPIP})");
            }
        }
        unstable {
            script {
                def fileNameArSim = powershell(returnStdout: true, script: "(Get-ChildItem -Path '${WORKSPACE}\\*' -Include ArSim*.zip | Sort-Object -Property LastWriteTime | select -Last 1).Name").trim();
				def fileNamePIP = powershell(returnStdout: true, script: "(Get-ChildItem -Path '${WORKSPACE}\\*' -Include PIP*.zip | Sort-Object -Property LastWriteTime | select -Last 1).Name").trim();
                def downloadArSim = ""
                def downloadPIP = ""
                
                downloadArSim = UploadToGitHub(version: "${RELEASE_VERSION}", organization: "${REPO_ORGANIZATION}", name: "${REPO_NAME}", file: "${WORKSPACE}\\${fileNameArSim}");
				downloadPIP = UploadToGitHub(version: "${RELEASE_VERSION}", organization: "${REPO_ORGANIZATION}", name: "${REPO_NAME}", file: "${WORKSPACE}\\${fileNamePIP}");
                
                office365ConnectorSend(webhookUrl: "${TEAMS_CHANNEL_URL}",
                    color: "ffff00",
                    message:"## Build Unstable   \n[**Jenkins ARsim Structure Download Link**](${env.BUILD_URL}artifact/${fileNameArSim})   \n[**Jenkins PIP Download Link**](${env.BUILD_URL}artifact/${fileNamePIP})   \n[**Download Link ARsim**](${downloadArSim})   \n[**Download Link PIP**](${downloadPIP})");
            }
        }
    }
}
